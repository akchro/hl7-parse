version: '3.8'

services:
  # PostgreSQL Database with optimized production settings
  postgres:
    image: postgres:15-alpine
    container_name: hl7-postgres-prod
    environment:
      POSTGRES_DB: hl7_liteboard
      POSTGRES_USER: hl7user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-hl7password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hl7user -d hl7_liteboard"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    networks:
      - hl7-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API Server - Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hl7-backend-prod
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: hl7_liteboard
      DB_USER: hl7user
      DB_PASSWORD: ${DB_PASSWORD:-hl7password}
      FRONTEND_URL: ${FRONTEND_URL:-https://hl7liteboard.com}
      LOG_LEVEL: warn
      JWT_SECRET: ${JWT_SECRET:-changeme_in_production}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-hl7redis}
    volumes:
      - backend_prod_uploads:/app/uploads
      - backend_prod_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - hl7-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Load Balancer with Nginx
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: hl7-nginx-prod
    environment:
      - BACKEND_UPSTREAM=backend:3001
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - hl7-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: hl7-redis-prod
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD:-hl7redis}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    networks:
      - hl7-prod-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: hl7-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: always
    networks:
      - hl7-prod-network

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: hl7-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    restart: always
    networks:
      - hl7-prod-network

volumes:
  postgres_prod_data:
    driver: local
  backend_prod_uploads:
    driver: local
  backend_prod_logs:
    driver: local
  redis_prod_data:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  hl7-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

# Production deployment configurations
configs:
  postgres_config:
    file: ./database/postgresql.conf
  nginx_config:
    file: ./nginx/nginx.conf

secrets:
  db_password:
    external: true
  jwt_secret:
    external: true
  redis_password:
    external: true