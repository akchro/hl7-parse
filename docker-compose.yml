version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hl7-postgres
    environment:
      POSTGRES_DB: hl7_liteboard
      POSTGRES_USER: hl7user
      POSTGRES_PASSWORD: hl7password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hl7user -d hl7_liteboard"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - hl7-network

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hl7-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: hl7_liteboard
      DB_USER: hl7user
      DB_PASSWORD: hl7password
      FRONTEND_URL: http://localhost
      LOG_LEVEL: info
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - hl7-network

  # Frontend with Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-production
    container_name: hl7-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - hl7-network

  # Redis for session storage and caching (optional)
  redis:
    image: redis:7-alpine
    container_name: hl7-redis
    command: redis-server --appendonly yes --requirepass hl7redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - hl7-network

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  redis_data:
    driver: local

networks:
  hl7-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16