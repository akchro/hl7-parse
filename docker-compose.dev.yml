version: '3.8'

services:
  # PostgreSQL Database (same as production)
  postgres:
    image: postgres:15-alpine
    container_name: hl7-postgres-dev
    environment:
      POSTGRES_DB: hl7_liteboard_dev
      POSTGRES_USER: hl7user
      POSTGRES_PASSWORD: hl7password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hl7user -d hl7_liteboard_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - hl7-dev-network

  # Backend API Server with Hot Reload
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: hl7-backend-dev
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: hl7_liteboard_dev
      DB_USER: hl7user
      DB_PASSWORD: hl7password
      FRONTEND_URL: http://localhost:5173
      LOG_LEVEL: debug
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_dev_uploads:/app/uploads
    ports:
      - "3001:3001"
      - "9229:9229" # Node.js debugging port
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run dev
    restart: unless-stopped
    networks:
      - hl7-dev-network

  # Frontend Development Server with Hot Reload
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: hl7-frontend-dev
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3001
      VITE_WS_URL: ws://localhost:3001
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    command: npm run dev -- --host 0.0.0.0
    restart: unless-stopped
    networks:
      - hl7-dev-network

  # Redis for development
  redis-dev:
    image: redis:7-alpine
    container_name: hl7-redis-dev
    command: redis-server --appendonly yes --requirepass hl7redis
    volumes:
      - redis_dev_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - hl7-dev-network

  # pgAdmin for database management (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: hl7-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@hl7liteboard.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - hl7-dev-network

  # Mailhog for email testing (development only)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: hl7-mailhog
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web UI port
    restart: unless-stopped
    networks:
      - hl7-dev-network

volumes:
  postgres_dev_data:
    driver: local
  backend_dev_uploads:
    driver: local
  redis_dev_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  hl7-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16